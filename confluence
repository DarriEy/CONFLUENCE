#!/bin/bash
#
# CONFLUENCE Shell Wrapper with Python Environment Management
#
# Usage: ./confluence [options]
# Example: ./confluence --install
#

set -euo pipefail

# ──────────────────────────────────────────────────────────────────────────────
# Bootstrap: pick interpreter and (re)create venv with Python 3.11 if available
# ──────────────────────────────────────────────────────────────────────────────
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR="${VENV_DIR:-"$SCRIPT_DIR/venv"}"

# Prefer python3.11; allow override via CONFLUENCE_PYTHON
PY_BIN="${CONFLUENCE_PYTHON:-$(command -v python3.11 || command -v python3)}"
echo "Info: Installer will use $("$PY_BIN" -V 2>/dev/null || echo 'unknown') at $PY_BIN"

# Create venv if missing or not 3.11.x; avoid Python >=3.14 which breaks numba
need_venv=true
if [[ -x "$VENV_DIR/bin/python" ]]; then
  VVER="$("$VENV_DIR/bin/python" -c 'import sys;print(f"{sys.version_info.major}.{sys.version_info.minor}")' || echo '')"
  [[ "$VVER" =~ ^3\.11$ ]] && need_venv=false
fi
if $need_venv; then
  echo "Info: (Re)creating venv with $PY_BIN"
  rm -rf "$VENV_DIR"
  "$PY_BIN" -m venv "$VENV_DIR"
fi

# Activate venv and pin tools
# shellcheck disable=SC1090
source "$VENV_DIR/bin/activate"
export PY="$VENV_DIR/bin/python"
export PIP="$PY -m pip"

# Upgrade build tooling early
$PIP install -U pip setuptools wheel

# ──────────────────────────────────────────────────────────────────────────────
# Pretty output helpers
# ──────────────────────────────────────────────────────────────────────────────
if [[ -t 1 ]]; then
  RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'
else
  RED=''; GREEN=''; YELLOW=''; BLUE=''; NC=''
fi
print_error(){ echo -e "${RED}Error:${NC} $1" >&2; }
print_warning(){ echo -e "${YELLOW}Warning:${NC} $1"; }
print_info(){ echo -e "${BLUE}Info:${NC} $1"; }
print_success(){ echo -e "${GREEN}Success:${NC} $1"; }

# ──────────────────────────────────────────────────────────────────────────────
# Config
# ──────────────────────────────────────────────────────────────────────────────
SCRIPT_NAME="confluence"
CONFLUENCE_SCRIPT="CONFLUENCE.py"
MIN_PYTHON_VERSION="3.8"
REQUIRED_PYTHON_VERSION="3.11"

# ──────────────────────────────────────────────────────────────────────────────
# R setup & rpy2 env helpers
# ──────────────────────────────────────────────────────────────────────────────
setup_rpy2_compiler_flags() {
  print_info "Setting up compiler environment for rpy2..."
  local lib_paths=()

  # Respect existing env vars
  [[ -n "${LD_LIBRARY_PATH:-}" ]] && IFS=':' read -ra paths <<< "$LD_LIBRARY_PATH" && lib_paths+=("${paths[@]}")
  [[ -n "${LIBRARY_PATH:-}"   ]] && IFS=':' read -ra paths <<< "$LIBRARY_PATH"   && lib_paths+=("${paths[@]}")

  # Common system dirs
  lib_paths+=("/usr/lib" "/usr/lib64" "/lib" "/lib64")

  # Derive -L/-I flags
  local ldflags="" cflags="" seen=()
  for p in "${lib_paths[@]}"; do
    [[ -d "$p" ]] || continue
    if [[ " ${seen[*]} " != *" $p "* ]]; then
      seen+=("$p")
      ldflags+=" -L$p"
      # naive include sibling heuristic
      inc="${p/lib/include}"
      [[ -d "$inc" ]] && cflags+=" -I$inc"
    fi
  done
  [[ -n "$ldflags" ]] && export LDFLAGS="$ldflags ${LDFLAGS:-}" && print_info "Set LDFLAGS for rpy2 compilation"
  [[ -n "$cflags"  ]] && export CFLAGS="$cflags ${CFLAGS:-}"   && print_info "Set CFLAGS for rpy2 compilation"
}

check_rpy2_dependencies() {
  print_info "Checking for libraries required by rpy2..."
  if [[ "$(uname)" == "Darwin" ]]; then
    print_info "macOS detected: skipping Linux-specific (ldconfig/tirpc) checks"
    return 0
  fi

  local required_libs=("lzma" "bz2" "z" "tirpc")
  local missing=() found=()

  if command -v ldconfig >/dev/null 2>&1; then
    for lib in "${required_libs[@]}"; do
      if ldconfig -p 2>/dev/null | grep -q "lib${lib}\.so"; then found+=("$lib"); else missing+=("$lib"); fi
    done
  else
    # Fallback heuristic
    local paths=("/usr/lib" "/usr/lib64" "/lib" "/lib64")
    [[ -n "${LD_LIBRARY_PATH:-}" ]] && IFS=':' read -ra add <<< "$LD_LIBRARY_PATH" && paths+=("${add[@]}")
    for lib in "${required_libs[@]}"; do
      local ok=false
      for p in "${paths[@]}"; do
        [[ -f "$p/lib${lib}.so" || -f "$p/lib${lib}.a" ]] && ok=true && break
      done
      $ok && found+=("$lib") || missing+=("$lib")
    done
  fi

  [[ ${#found[@]} -gt 0 ]] && print_success "Found libraries: ${found[*]}"
  if [[ ${#missing[@]} -gt 0 ]]; then
    print_warning "Could not detect libraries: ${missing[*]}"
    print_info "These libraries are REQUIRED for rpy2 compilation on many Linux systems."
    print_info "Common module names: xz, bzip2, libtirpc, zlib"
    read -p "Press Enter to continue anyway, or Ctrl+C to abort and load modules..." _
  fi
}

setup_r_environment() {
  print_info "Auto-detecting R environment..."
  if ! command -v R >/dev/null 2>&1; then
    print_error "R is not available in PATH"
    print_info "Please install R or load an R module (e.g., 'module load r')."
    return 1
  fi
  print_success "Found $(R --version | head -1)"

  if [[ -z "${R_HOME:-}" ]]; then
    print_info "R_HOME not set, auto-detecting..."
    local rh; rh="$(R RHOME 2>/dev/null || true)"
    if [[ -n "$rh" && -d "$rh" ]]; then
      export R_HOME="$rh"
      print_success "Set R_HOME=$R_HOME"
    else
      print_warning "Could not detect R_HOME automatically; continuing"
    fi
  else
    print_success "R_HOME already set: $R_HOME"
  fi

  if [[ -n "${R_HOME:-}" && -d "$R_HOME/lib" ]]; then
    case "$(uname)" in
      Darwin) export DYLD_FALLBACK_LIBRARY_PATH="$R_HOME/lib:${DYLD_FALLBACK_LIBRARY_PATH:-}" ;;
      *)      export LD_LIBRARY_PATH="$R_HOME/lib:${LD_LIBRARY_PATH:-}" ;;
    esac
    print_info "Added $R_HOME/lib to library path"
  fi

  setup_rpy2_compiler_flags
  check_rpy2_dependencies
}

# ──────────────────────────────────────────────────────────────────────────────
# GDAL Python bindings install (version-matched)
# ──────────────────────────────────────────────────────────────────────────────
install_gdal_python() {
  print_info "Detecting system GDAL version..."
  if ! command -v gdal-config >/dev/null 2>&1; then
    print_info "gdal-config not found; skipping GDAL Python bindings"
    return 0
  fi
  local ver; ver="$(gdal-config --version 2>/dev/null || true)"
  if [[ -z "$ver" ]]; then
    print_warning "Could not detect GDAL version; skipping"
    return 0
  fi
  print_success "Found system GDAL $ver"
  print_info "Installing matching GDAL Python wheel..."
  if $PIP install "GDAL==$ver"; then
    print_success "Installed GDAL==$ver"
    return 0
  fi
  local mm; mm="$(echo "$ver" | cut -d. -f1,2)"
  print_warning "Exact match failed; trying ${mm}.x series"
  $PIP install "GDAL>=${mm}.0,<${mm}.99" || {
    print_warning "GDAL wheel install failed; you may need to compile or adjust GDAL."
    return 1
  }
  print_success "Installed GDAL for ${mm}.x"
}

# ──────────────────────────────────────────────────────────────────────────────
# Requirements installer (filters GDAL/rpy2, uses real temp file)
# ──────────────────────────────────────────────────────────────────────────────
install_python_requirements() {
  local requirements_file="$1"
  local use_break_system_packages="${2:-true}"

  [[ -f "$requirements_file" ]] || { print_error "Requirements file not found: $requirements_file"; return 1; }

  local pip_flags=""
  if [[ -z "${VIRTUAL_ENV:-}" && -z "${CONDA_DEFAULT_ENV:-}" ]] && [[ "$use_break_system_packages" == "true" ]]; then
    pip_flags="--break-system-packages"
  fi

  print_info "Installing Python dependencies from: $requirements_file"
  print_info "This may take several minutes..."
  echo ""

  local temp_requirements
  temp_requirements="$(mktemp "${TMPDIR:-/tmp}/confluence-reqs.XXXXXX")"
  if ! grep -v -iE "^(GDAL|rpy2)([>=<~!]|$)" "$requirements_file" > "$temp_requirements"; then
    cp "$requirements_file" "$temp_requirements"
  fi

  local want_gdal=false want_rpy2=false
  grep -qiE "^GDAL([>=<~!]|$)" "$requirements_file" && want_gdal=true
  grep -qiE "^rpy2([>=<~!]|$)" "$requirements_file" && want_rpy2=true
  $want_gdal && print_info "Note: GDAL will be installed separately after version detection"
  $want_rpy2 && print_info "Note: rpy2 will be installed separately (optional)"

  : "${RPY2_CFFI_MODE:=ABI}"; export RPY2_CFFI_MODE

  if $PIP install -r "$temp_requirements" $pip_flags; then
    rm -f "$temp_requirements"
    if $want_gdal || command -v gdal-config >/dev/null 2>&1; then
      echo ""; print_info "GDAL module detected - installing Python bindings..."
      install_gdal_python || print_warning "GDAL Python bindings installation failed; continuing..."
    fi
    if $want_rpy2; then
      echo ""; print_info "Attempting to install rpy2 (RPY2_CFFI_MODE=$RPY2_CFFI_MODE)"
      if $PIP install rpy2 $pip_flags; then
        print_success "rpy2 installed successfully"
      else
        print_warning "rpy2 installation failed; continuing without it"
      fi
    fi
    print_success "Core dependencies installed successfully"
    return 0
  else
    rm -f "$temp_requirements"
    print_error "Failed to install dependencies"
    return 1
  fi
}

# ──────────────────────────────────────────────────────────────────────────────
# Utility: find CONFLUENCE.py
# ──────────────────────────────────────────────────────────────────────────────
find_confluence_script() {
  local here="$SCRIPT_DIR"
  local cands=(
    "$here/$CONFLUENCE_SCRIPT"
    "$here/../$CONFLUENCE_SCRIPT"
    "$PWD/$CONFLUENCE_SCRIPT"
  )
  [[ -n "${CONFLUENCE_CODE_DIR:-}" ]] && cands=( "$CONFLUENCE_CODE_DIR/$CONFLUENCE_SCRIPT" "${cands[@]}" )
  for p in "${cands[@]}"; do [[ -f "$p" ]] && { echo "$p"; return 0; }; done
  return 1
}

# ──────────────────────────────────────────────────────────────────────────────
# Verify Python version (informational)
# ──────────────────────────────────────────────────────────────────────────────
verify_python_version() {
  local preferred="$1"
  local cur="$($PY -c 'import sys;print(f"{sys.version_info.major}.{sys.version_info.minor}")')"
  print_info "Current Python version: $cur"
  if [[ "$cur" == "$preferred" ]]; then
    print_success "Python $cur matches preferred $preferred"
  else
    print_warning "Python $cur detected, but $preferred is recommended"
  fi
}

# ──────────────────────────────────────────────────────────────────────────────
# Install-mode environment setup (trusts the top venv; no new venvs)
# ──────────────────────────────────────────────────────────────────────────────
setup_install_env() {
  local confluence_dir="$1"
  print_info "Setting up Python environment for installation..."
  echo ""
  print_info "Python interpreter: $($PY -V) @ $PY"
  print_info "Pip: $($PIP --version)"
  echo ""

  verify_python_version "$REQUIRED_PYTHON_VERSION"

  if ! setup_r_environment; then
    print_error "R environment setup failed"; return 1
  fi

  # Ensure build tooling up-to-date
  $PIP install -U pip setuptools wheel

  local req="$confluence_dir/requirements.txt"
  if [[ -f "$req" ]]; then
    print_info "Installing all packages from requirements.txt into venv..."
    install_python_requirements "$req" "false" || return 1
  else
    print_warning "requirements.txt not found - installing a basic set..."
    $PIP install numpy pandas geopandas rasterio netCDF4 PyYAML shapely rasterstats psutil xarray || {
      print_error "Failed to install basic dependencies"; return 1; }
  fi

  print_success "Python environment setup complete"
}

# ──────────────────────────────────────────────────────────────────────────────
# Wrapper flags
# ──────────────────────────────────────────────────────────────────────────────
handle_wrapper_flags() {
  case "$1" in
    --wrapper-help)
      cat <<EOF
Wrapper options:
  --wrapper-help   Show this help
  --wrapper-info   Show wrapper and environment info
  --wrapper-debug  Enable bash -x tracing
  --install        Set up Python env and external tools
EOF
      exit 0;;
    --wrapper-info)
      echo "Wrapper script: $0"
      echo "Using Python: $($PY -V) @ $PY"
      echo "Pip: $($PIP --version)"
      echo "VENV: ${VIRTUAL_ENV:-$VENV_DIR}"
      echo "R_HOME: ${R_HOME:-'(unset)'}"
      command -v R >/dev/null 2>&1 && echo "R: $(R --version | head -1)"
      exit 0;;
    --wrapper-debug) set -x; return 1;;
    --install) return 1;;
    *) return 1;;
  esac
}

# ──────────────────────────────────────────────────────────────────────────────
# Main
# ──────────────────────────────────────────────────────────────────────────────
main() {
  local run_install=false
  for a in "$@"; do
    handle_wrapper_flags "$a" || true
    [[ "$a" == "--install" ]] && run_install=true
  done

  local confluence_script
  if ! confluence_script="$(find_confluence_script)"; then
    print_error "CONFLUENCE.py not found in expected locations."
    echo "Looked in: $SCRIPT_DIR, parent, and \$PWD. Set CONFLUENCE_CODE_DIR to override."
    exit 1
  fi
  local confluence_dir; confluence_dir="$(dirname "$confluence_script")"

  if $run_install; then
    print_info "CONFLUENCE installation mode"
    echo ""
    print_info "Prerequisites:"
    print_info "  - Python 3.11+ (using: $($PY --version 2>/dev/null || echo 'unknown'))"
    print_info "  - R ($(command -v R >/dev/null 2>&1 && R --version 2>/dev/null | head -1 || echo 'not found'))"
    print_info "  - GDAL dev tools (optional, for GDAL Python bindings)"
    echo ""
    print_info "Make sure any required OS packages or HPC modules are loaded if applicable."
    echo ""

    setup_install_env "$confluence_dir" || { print_error "Failed to set up Python environment"; exit 1; }

    echo ""; print_info "Python environment ready - proceeding to external tools..."
    ( cd "$confluence_dir" && \
      "$PY" "$CONFLUENCE_SCRIPT" --get_executables && \
      "$PY" "$CONFLUENCE_SCRIPT" --validate_binaries )

    echo ""
    print_success "Installation complete!"
    echo "To activate later:  source \"$VENV_DIR/bin/activate\""
    exit 0
  fi

  # Normal execution: run with the venv python we already activated
  cd "$confluence_dir"
  exec "$PY" "$CONFLUENCE_SCRIPT" "$@"
}

trap 'echo -e "\nInterrupted"; exit 130' INT TERM
main "$@"
